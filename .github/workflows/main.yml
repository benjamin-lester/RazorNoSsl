# This workflow builds .NET project, copies the publish/ folder to the droplet, and deploys the changes by starting the dotnet service
#   set up on the web server (with systemctl -> dotnet $dll_file).
# Prerequisites: 
#     1) set up Caddy reverse proxy 
#     2) set up systemctl service to execute dll 

name: RazorNoSsl .NET deployment

env:
   WEBSITE: bnlstr.comNoSsl
   PROJECT: RazorNoSsl
   DOTNET_VERSION: net6.0
   
on:
  push:
    branches: [ "RazorNoSsl" ]
  pull_request:
    branches: [ "RazorNoSsl" ]
  workflow_dispatch: # lets us trigger action manually

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet publish --no-restore -o Publish
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Deploy
      run: |
        which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
        which rsync || ( apt-get update -y && apt-get install rsync -y )
        eval $(ssh-agent -s)
        ssh-add <(echo "$SSH_PRIVATE_KEY")
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        scp -r "$GITHUB_WORKSPACE"/Publish/* $USERNAME@$SERVER_IP:/var/www/$WEBSITE
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
      SERVER_IP: ${{ secrets.BNLSTR_SERVER_IP }}
      USERNAME: ${{ secrets.USERNAME }} 
  sshcommands:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: SSH Remote Commands
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.BNLSTR_SERVER_IP }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          ls -al /var/www/$WEBSITE 2>/dev/null # to see if the files were copied
          sudo /bin/systemctl restart dotnet-bnlstr.com.service
